/* Copyright (C) 2016-2018 European Spallation Source, ERIC. See LICENSE file */
//===----------------------------------------------------------------------===//
///
/// \file
///
/// \brief Dataset for running unit tests - do not edit if unsure of what they do!
///
//===----------------------------------------------------------------------===//

#include <vector>

// clang-format off

//
// Invalid data
//
std::vector<uint8_t > err_short_header
{
  0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
};

std::vector<uint8_t> err_version
{// *
  0x21, 0xD6, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
};

std::vector<uint8_t> err_datatype
{//       **
  0x01, 0xD5, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
};

std::vector<uint8_t> err_length
{//                                                        *
  0x01, 0xD6, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
};

std::vector<uint8_t> err_nb_event_mismatch
{//                                                        *
  0x01, 0xD6, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a,
  0x02, 0x00, 0x00, 0x00, 0x01, 0xaa, 0x00, 0x00, 0x00, 0x02
};


std::vector<uint8_t> err_unknown_data_format
{//        *
  0x01, 0xDF, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x8a
};


std::vector<uint8_t> err_invalid_geometry
{//
  0x01, 0xD6, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06,
 //                               *
  0x01, 0x00, 0x00, 0x00, 0x01, 0xFF
};

//
// Valid data
//
std::vector<uint8_t> ok_header_only  // # of events 0
{
  0x01, 0xD6, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
  0x00
};

//
std::vector<uint8_t> ok_events_1
{
  0x01, 0xD6, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x8a
};

std::vector<uint8_t> ok_events_3
{
  0x01, 0xD6, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x00, 0x00, 0x02,
  0x4a, 0x00, 0x00, 0x00, 0x03, 0x8a
};

// seph = single event pulse height
std::vector<uint8_t> type_0xd5_seph_ok_1
{
  0x01, 0xD5, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x09,
  0x01, 0x02, 0x03, 0x00, 0x04, 0x00, 0x01, 0xab, 0xcd
};

std::vector<uint8_t> type_0xd5_seph_ok_3
{
  0x01, 0xD5, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d,
  ///                           # of samples
  0x01, 0x02, 0x03, 0x00, 0x04, 0x00, 0x03,
  0x12, 0x34, // 1'st sample
  0x56, 0x78, // 2'nd sample
  0x9a, 0xbc  // 3'rd sample
};

std::vector<uint8_t> type_0xd5_seph_err_hdr_len_mismatch
{
  0x01, 0xD5, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0c,
  0x01, 0x02, 0x03, 0x00, 0x04, 0x00, 0x03, 0xaa, 0xaa, 0xbb,
  0xbb, 0xcc // truncated
};

std::vector<uint8_t> type_0xd4_meph_err_hdr_len_mismatch  //(n=3, m=1)
{
  0x01, 0xD4, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1d,
  0x03, 0x00, 0x01,
  // time                 type  asic  chan  sample
  0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0xaa, 0xaa, // 1'st readout
  0x00, 0x00, 0x00, 0x05, 0x02, 0x01, 0x01, 0xbb, 0xbb, // 2'nd readout
  0x00, 0x00, 0x00, 0x09, 0x02, 0x02, 0x02, 0xcc // truncated
};

// meph = multi event pulse height
std::vector<uint8_t> type_0xd4_meph_ok_1
{
  0x01, 0xD4, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0c,
  0x01, 0x00, 0x01,
  // time                 type  asic  chan  sample
  0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0xaa, 0xaa // 1'st readout
};

std::vector<uint8_t> type_0xd4_meph_ok_n3m1  //(n=3, m=1)
{
  0x01, 0xD4, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1e,
  0x03, 0x00, 0x01,
  // time                 type  asic  chan  sample
  0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x12, 0x34, // 1'st readout
  0x00, 0x00, 0x00, 0x05, 0x02, 0x01, 0x01, 0x56, 0x78, // 2'nd readout
  0x00, 0x00, 0x00, 0x09, 0x02, 0x02, 0x02, 0x9a, 0xbc  // 3'rd readout
};

std::vector<uint8_t> type_0xd4_meph_err_hdr_len
{//                                                       **
  0x01, 0xD4, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0b,
  0x03, 0x00, 0x01,
  // time                 type  asic  chan  sample
  0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0xaa  // truncated
};

// clang-format on

/// Raw packet data above, now collect into iterable containers

std::vector<std::vector<uint8_t>> err_hdr{err_version, err_datatype, err_length,
                                          err_nb_event_mismatch};
