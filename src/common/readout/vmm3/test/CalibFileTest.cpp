// Copyright (C) 2021 European Spallation Source, ERIC. See LICENSE file
//===----------------------------------------------------------------------===//
///
/// \file
///
/// \brief Unit tests for loading calibration files and applying
/// calibration parameters to the VMMs in a Hybrid
//===----------------------------------------------------------------------===//

#include <common/readout/vmm3/CalibFile.h>
#include <common/readout/vmm3/Hybrid.h>
#include <common/testutils/TestBase.h>

auto j2 = R"(
  {
    "Detector" : "Freia",
    "Version"  : 1,
    "Hybrids" : 2,

    "Calibrations" : [
      { "VMMHybridCalibration" : {
          "HybridIndex" : 0,
          "HybridId" : "ff7245e2d61cfcce2feafd7e687cdb0e",
          "CalibrationDate" : "20210222-124533",

          "vmm0" : {
            "adc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "adc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "tdc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_ofs_corr" : [0.0, 1.0]
          },
          "vmm1" : {
            "adc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "adc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "tdc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_ofs_corr" : [0.0, 1.0]
          }
        }
      },
      { "VMMHybridCalibration" : {
          "HybridIndex" : 1,
          "HybridId" : "aa7245e2d61cfcce2feafd7e687cdb0e",
          "CalibrationDate" : "20210222-124533",

          "vmm0" : {
            "adc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "adc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "tdc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_ofs_corr" : [0.0, 1.0]
          },
          "vmm1" : {
            "adc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "adc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_offset" : [4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892, 4.336, 2.689, 1.315, 3.892],
            "tdc_slope"  : [1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171, 1.16,  1.164, 1.173, 1.171],
            "tdc_ofs_corr" : [0.0, 1.0]
          }
        }
      }
    ]
  }
)"_json;


class CalibFileTest : public TestBase {
protected:
  ESSReadout::CalibFile MyCalibFile{"Freia", hybrids};
  std::vector<ESSReadout::Hybrid> hybrids{2};
  nlohmann::json j;

  void SetUp() override {
    MyCalibFile.root = j2;
    hybrids[0].HybridId = "ff7245e2d61cfcce2feafd7e687cdb0e";
    hybrids[1].HybridId = "aa7245e2d61cfcce2feafd7e687cdb0e";
  }
};


TEST_F(CalibFileTest, NoFile) {
  EXPECT_ANY_THROW(MyCalibFile.load("nosuchfile"));
}

TEST_F(CalibFileTest, EmptyJson) {
  ESSReadout::CalibFile MyCalibFile("Freia", hybrids);
  MyCalibFile.root = j;
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

// Just verify that calibration parameters have actually changed
// the values used for channels and ADC/TDC have no special significance
TEST_F(CalibFileTest, TwoHybridsAllGood) {
  ASSERT_EQ(hybrids[0].VMMs[0].ADCCorr(1, 456), 456);
  auto TDCCorr = hybrids[0].VMMs[0].TDCCorr(1, 75);

  MyCalibFile.apply();

  ASSERT_NE(hybrids[0].VMMs[0].ADCCorr(1, 456), 456);
  ASSERT_NE(hybrids[0].VMMs[0].TDCCorr(1, 75), TDCCorr);
}

TEST_F(CalibFileTest, ErrorDetector) {
  MyCalibFile.root["Detector"] = "Udder";
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

TEST_F(CalibFileTest, ErrorVersion) {
  MyCalibFile.root["Version"] = 0;
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

TEST_F(CalibFileTest, ErrorNumHybrids) {
  MyCalibFile.root["Hybrids"] = 42;
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

TEST_F(CalibFileTest, ErrorHybridIndex) {
  MyCalibFile.root["Calibrations"][0]["VMMHybridCalibration"]["HybridIndex"] = 42;
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

TEST_F(CalibFileTest, ErrorHybridIdSize) {
  MyCalibFile.root["Calibrations"][0]["VMMHybridCalibration"]["HybridId"] = "42";
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

TEST_F(CalibFileTest, ErrorDuplicateHybridId) {
  MyCalibFile.root["Calibrations"][0]["VMMHybridCalibration"]["HybridId"] =
  MyCalibFile.root["Calibrations"][1]["VMMHybridCalibration"]["HybridId"];
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

TEST_F(CalibFileTest, ErrorCalibSize) {
  auto & ADCOffsets = MyCalibFile.root["Calibrations"][0]["VMMHybridCalibration"]["vmm0"]["adc_offset"];
  ADCOffsets.erase(ADCOffsets.begin() + 4);
  EXPECT_ANY_THROW(MyCalibFile.apply());
}

int main(int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
