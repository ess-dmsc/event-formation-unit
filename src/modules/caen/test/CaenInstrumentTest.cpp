// Copyright (C) 2020-2022 European Spallation Source, ERIC. See LICENSE file
//===----------------------------------------------------------------------===//
///
/// \file
//===----------------------------------------------------------------------===//

#include <caen/CaenInstrument.h>
#include <common/testutils/SaveBuffer.h>
#include <common/testutils/TestBase.h>

using namespace Caen;

// Contrieved but valid configuration file
// The config one panel with 4 x 1 tubes with 7 straws each having a
// resolution of 1 - this gives a total of 28 pixels
std::string LokiConfigFile{"deleteme_loki_instr_config.json"};
std::string LokiConfigStr = R"(
  {
    "Detector": "loki",

    "StrawResolution" : 256,

    "PanelConfig" : [
      { "Bank" : 0, "Vertical" :  false,  "TubesZ" : 1, "TubesN" : 1, "StrawOffset" : 0    }
    ]

  }
)";

std::string BifrostConfigFile{"deleteme_bifrost_instr_config.json"};
std::string BifrostConfigStr = R"(
  {
    "Detector": "bifrost",
    "MaxRing": 4,
    "StrawResolution": 300
  }
)";

// LOKI minimal valid calib file
std::string LokiCalibFile{"deleteme_caen_instr_loki_calib.json"};
std::string LokiCalibStr = R"(
  {
    "Calibration" : {
      "version" : 0,
      "date" : "2023-06-07T15:14:48.025700",
      "info" : "generated by nullcalib.py",

      "instrument" : "loki",
      "groups" : 1,
      "groupsize" : 7,

      "Parameters" : [
        {
          "groupindex" : 0,
          "intervals" : [[  0.0,0.143], [0.144,0.286], [0.287,0.429], [ 0.43,0.571], [0.572,0.714], [0.715,0.857], [0.858,  1.0]],
          "polynomials" : [[0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] ]
        }
      ]
    }
  }
)";

// BIFROST minimal valid calib file
std::string BifrostCalibFile{"deleteme_caen_instr_bifrost_calib.json"};
std::string BifrostCalibStr = R"(
  {
    "Calibration" : {
      "version" : 0,
      "date" : "2023-06-07T15:17:44.610568",
      "info" : "generated by nullcalib.py",

      "instrument" : "bifrost",
      "groups" : 1,
      "groupsize" : 3,

      "Parameters" : [
        {
          "groupindex" : 0,
          "intervals" : [[  0.0,0.333], [0.334,0.667], [0.668,  1.0]],
          "polynomials" : [[0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] , [0.0, 0.0, 0.0, 0.0] ]
        }
      ]
    }
  }
)";

class CaenInstrumentTest : public TestBase {
protected:
  struct CaenCounters counters;
  BaseSettings Settings;

  void SetUp() override {
    Settings.DetectorName = "loki";
    Settings.ConfigFile = LokiConfigFile;
  }
  void TearDown() override {}
};

// Test cases below
TEST_F(CaenInstrumentTest, LokiConstructor) {
  Settings.CalibFile = LokiCalibFile;
  CaenInstrument Caen(counters, Settings);
}

TEST_F(CaenInstrumentTest, BifrostConstructor) {
  Settings.ConfigFile = BifrostConfigFile;
  Settings.CalibFile = BifrostCalibFile;
  Settings.DetectorName = "bifrost";
  CaenInstrument Caen(counters, Settings);
}

int main(int argc, char **argv) {
  saveBuffer(LokiConfigFile, (void *)LokiConfigStr.c_str(),
             LokiConfigStr.size());
  saveBuffer(BifrostConfigFile, (void *)BifrostConfigStr.c_str(),
             BifrostConfigStr.size());
  saveBuffer(LokiCalibFile, (void *)LokiCalibStr.c_str(), LokiCalibStr.size());
  saveBuffer(BifrostCalibFile, (void *)BifrostCalibStr.c_str(),
             BifrostCalibStr.size());

  testing::InitGoogleTest(&argc, argv);
  auto RetVal = RUN_ALL_TESTS();

  deleteFile(LokiConfigFile);
  deleteFile(BifrostConfigFile);
  deleteFile(LokiCalibFile);
  deleteFile(BifrostCalibFile);
  return RetVal;
}
