/* Copyright (C) 2018 European Spallation Source, ERIC. See LICENSE file */
//===----------------------------------------------------------------------===//
///
/// \file
///
//===----------------------------------------------------------------------===//

#include <vector>

// clang-format off
std::vector<uint8_t> header_only {
  0x00, 0x33, 0x71, 0x37, 0x56, 0x4d, 0x32, 0x00, 0x4c, 0x39, 0x2f, 0x60 // hdr
};

std::vector<uint8_t> data_3_ch0 {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00, // hit 1
  0xe0, 0x92, 0x34, 0x01, 0x80, 0x00, // hit 2
  0xe0, 0x92, 0x20, 0x22, 0x80, 0x00  // hit 3
};

std::vector<uint8_t> marker_3_vmm1_3 {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 1: vmm1, timeStamp 1
  0x00, 0x00, 0x00, 0x00, 0x08, 0x02, // marker 2: vmm2, timeStamp 2
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x03 // marker 3: vmm3, timeStamp 3
};

std::vector<uint8_t> marker_3_data_3 {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 1: vmm1, timeStamp 1
  0x00, 0x00, 0x00, 0x00, 0x08, 0x02, // marker 2: vmm2, timeStamp 2
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, // marker 3: vmm3, timeStamp 3
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00, // hit 1
  0xe0, 0x92, 0x34, 0x01, 0x80, 0x00, // hit 2
  0xe0, 0x92, 0x20, 0x22, 0x80, 0x00 // hit 3
};

std::vector<uint8_t> marker_data_mixed_3 {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x34, 0x01, 0x80, 0x00, // hit 1
  0x00, 0x00, 0x00, 0x00, 0x08, 0x02, // marker 1: vmm2, timeStamp 2
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, // marker 2: vmm3, timeStamp 3
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00, // hit 2
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 3: vmm1, timeStamp 1
  0xe0, 0x92, 0x20, 0x22, 0x80, 0x00 // hit 3
};

std::vector<uint8_t> no_data {
  //                        **    **    **    **
  0x00, 0x33, 0x71, 0x37, 0x56, 0x41, 0x32, 0x00, 0x4c, 0x39, 0x2f, 0x60, // hdr
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 1: vmm1, timeStamp 1
  0x00, 0x00, 0x00, 0x00, 0x08, 0x02, // marker 2: vmm2, timeStamp 2
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x03 // marker 3: vmm3, timeStamp 3
};

std::vector<uint8_t> invalid_fec_id {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
//                    *
  0x56, 0x4d, 0x33, 0x00,             // Data ID 564d33 and fecId 0
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00, // hit 1
  0xe0, 0x92, 0x34, 0x01, 0x80, 0x00, // hit 2
  0xe0, 0x92, 0x20, 0x22, 0x80, 0x00  // hit 3
};

std::vector<uint8_t> invalid_dataid {
  0x00, 0x33, 0x71, 0x37,
//  **    **    **    **
  0xaa, 0xbb, 0xcc, 0xdd,
  0x4c, 0x39, 0x2f, 0x60,             // Udp timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 1: vmm1, timeStamp 1
  0x00, 0x00, 0x00, 0x00, 0x08, 0x02, // marker 2: vmm2, timeStamp 2
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x03 // marker 3: vmm3, timeStamp 3
};

std::vector<uint8_t> inconsistent_datalen {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x34, 0x01, 0x80, 0x00, // hit 1
  0x00, 0x00, 0x00, 0x00, 0x08, 0x02, // marker 1: vmm2, timeStamp 2
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, // marker 2: vmm3, timeStamp 3
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00, // hit 2
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 3: vmm1, timeStamp 1
  0xe0, 0x92, 0x20, 0x22 // hit 3 - truncated
};

std::vector<uint8_t> timestamp_error {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0x00, 0x00, 0x00, 0x00, 0x04, 0x03, // marker 2: vmm1, timeStamp 3
  0x00, 0x00, 0x00, 0x00, 0x04, 0x02 // marker 3: vmm1, timeStamp 2
};

std::vector<uint8_t> timestamp_overflow {
  0x00, 0x33, 0x71, 0x37,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, // marker 1: vmm1, timeStamp 42 bit
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00 // marker 2: vmm1, timeStamp 0
};


//Data format hit (MSB left, LSB right)
//data 1
//5 bit triggerOffset = (data1 >> 27) & 0x1F
//5 bit vmmid = (data1 >> 22) & 0x1F
//10 bit adc = (data1 >> 12) & 0x3FF
//12 bit bcid = BitMath::gray2bin32(data1 & 0xFFF)
//data 2
//1 bit 1 = data
//1 bit overThreshold = (data2 >> 14) & 0x01
//6 bit chno = (data2 >> 8) & 0x3f
//8 bit tdc = data2 & 0xff;

//Data format marker (MSB left, LSB right)
//data 1
//32 bit timestamp_upper_32bit = data1
//data 2
//1 bit 0 = marker
//5 bit vmmid = (data2 >> 10) & 0x1F;
//10 bit timestamp_lower_10bit = data2 & 0x03FF

std::vector<uint8_t> timestamp_lost {
  0x00, 0x00, 0x00, 0x01,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 1: vmm1, timeStamp 1
  0xf8, 0x50, 0x00, 0x00, 0x80, 0x00, // hit vmm1, offset 31
  0x00, 0x50, 0x00, 0x00, 0x80, 0x00  // hit vmm1, offset 0

};

std::vector<uint8_t> timestamp_not_lost {
  0x00, 0x00, 0x00, 0x02,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x03, 0xcf,             // Offset overflow last frame
  0x00, 0x00, 0x00, 0x00, 0x04, 0x01, // marker 1: vmm1, timeStamp 1
  0xf8, 0x50, 0x00, 0x00, 0x80, 0x00, // hit vmm1, offset 31
  0x00, 0x00, 0x00, 0x80, 0x04, 0x01, // marker 1: vmm1, timeStamp 131073
  0x00, 0x50, 0x00, 0x00, 0x80, 0x00  // hit vmm1, offset 0
};

std::vector<uint8_t> framecounter_error1 {
  0x00, 0x00, 0x00, 0x01,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00 // hit 1
};

std::vector<uint8_t> framecounter_error2 {
  0x00, 0x00, 0x00, 0x04,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00  // hit 1
};

std::vector<uint8_t> framecounter_overflow1{
  0xFF, 0xFF, 0xFF, 0xFF,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00  // hit 1
};

std::vector<uint8_t> framecounter_overflow2 {
  0x00, 0x00, 0x00, 0x00,             // Frame Counter
  0x56, 0x4d, 0x33, 0x10,             // Data ID 564d33 and fecId 1
  0x4c, 0x39, 0x2f, 0x60,             // UDP timestamp
  0x00, 0x00, 0x00, 0x00,             // Offset overflow last frame
  0xe0, 0x92, 0x24, 0x02, 0x80, 0x00  // hit 1
};
// clang-format on
