# Copyright (C) 2016 European Spallation Source ERIC
#

HDF5=
KAFKAINC=/usr/local/include
KAFKALIB=/usr/lib64

# Verbose
Q=@
ifdef V
Q=
endif

cxx=g++

include= -I. -I..
warnings = -Werror -Wall -Wpedantic -Wextra -Wmissing-include-dirs

# Experimental RELEASE flag - use  with caution
ifdef RELEASE
optflags = -DNDEBUG
endif

ifdef DEBUG
debugflags = -ggdb
endif

ifndef NOKAFKA
include+= -I$(KAFKAINC)
endif

# Experimental OPTIMIZE flag - use with caution
ifdef OPTIMIZE
optflags += -fprofile-use
endif

#removed from below line: -Ofast -flto  -O3
cxxflags = -std=c++11 $(debugflags)  -m64 -march=native $(optflags)  $(include) $(warnings)

ifdef TRACE
cxxflags +=-DTRACE
endif

# Don't use Kafka (remove by compilation and linking)
ifdef NOKAFKA
cxxflags +=-DNOKAFKA
else
#kafkalibs= /usr/local/lib/librdkafka++.so /usr/local/lib/librdkafka.so # Martin
kafkalibs= $(KAFKALIB)/librdkafka++.so $(KAFKALIB)/librdkafka.so
endif

ldflags = -L/usr/local/lib -lpthread -ldl

ifeq ($(_ARCH),Linux)
ldflags.so = -Wl,--whole-archive $(library) $(kafkalibs) -Wl,--no-whole-archive -fPIC -shared
endif

ifeq ($(_ARCH),Darwin)
ldflags.so = -Wl,-all_load $(library) $(kafkalibs) -fPIC -shared
endif

# Enable profiling
ifdef PROF
cxxflags += -pg
ldflags += -pg
ldflags.so += -pg
endif


ifdef GRAYLOG
cxxflags += -DGRAYLOG -I../../graylog-logger/include
ldflags += -L../../graylog-logger/graylog_logger/build -lgraylog_logger
endif

# Enable test coverage and profile guided optimization
ifdef COV
cxxflags += -coverage -fprofile-generate
ldflags += -coverage -fprofile-generate
endif


# Specify alternative googletest library (suppress warnings on Jenkins)
ifndef GTEST
ldflags_test  = $(ldflags) -lgtest -pthread
cxxflags_test = $(cxxflags) -I/usr/include
else
ldflags_test  = $(ldflags) $(GTEST)/lib/libgtest.a -pthread
cxxflags_test = $(cxxflags) -I$(GTEST)/include -Wno-error=sign-compare
endif
