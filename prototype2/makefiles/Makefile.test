# Copyright (C) 2016 European Spallation Source ERIC
#

testprogs = DetectorTest CSPECDataTest CSPECChanConvTest RingBufferTest
testprogs += CSPECEventTest EFUArgsTest
testprogs += MultiGridGeometryTest EventletTest NewStatsTest EventTest
testprogs += NMXVMM2SRSDataTest ClustererTest TimeTest GeometryTest FBSerializerTest
testprogs += EventletBuilderH5Test EventletBuilderTest HistSerializerTest

ifeq ($(_ARCH),Linux)
testprogs += ParserTest CalibrationFileTest
endif

#
# targets
#
coverage:
	$(Q)gcov -b -c *.gcda
	$(Q)lcov --rc lcov_branch_coverage=1 -c -d . --no-external -o lcov.out
	$(Q)genhtml --branch-coverage -o html lcov.out

valgrind: test
	$(Q)rm -f valgrind_error
	$(Q)for test in $(testprogs) ; do valgrind --leak-check=full -v --log-file="$$test.valgrind" ./$$test  || echo error >> valgrind_error; done

test: $(testprogs)
	@echo "done building tests"

runtest: test
	$(Q)for test in $(testprogs) ; do ./$$test --gtest_output=xml:$$test.xml; done


%.o: %.cpp
	@echo building $@
	$(Q)g++ $(cxxflags_test) %< -o $@ $(ldflags_test)

#
# EFU Tests
#
ifeq ($(_ARCH),Linux)
ParserTest: efu/ParserTest.cpp test/SyscallWrappers.cpp efu/Parser.o \
	common/EFUArgs.o cspec/CalibrationFile.o efu/Parser.h \
	common/EFUArgs.h cspec/CalibrationFile.h
	@echo building $@
	$(Q)g++ -Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open -c  $(cxxflags_test) -std=c++11 -I . \
				-I .. test/SyscallWrappers.cpp efu/ParserTest.cpp
	$(Q)g++ -Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open SyscallWrappers.o ParserTest.o efu/Parser.o \
				cspec/CalibrationFile.o common/EFUArgs.o $(library) -o $@ $(ldflags_test)
endif

#
# CSPEC / Multi Grid Tests
#
CSPECChanConvTest: cspec/CSPECChanConvTest.cpp cspec/CSPECChanConv.o cspec/CSPECChanConv.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) cspec/CSPECChanConvTest.cpp cspec/CSPECChanConv.o -o $@ $(ldflags_test)

CSPECDataTest: cspec/CSPECDataTest.cpp cspec/CSPECData.o cspec/CSPECChanConv.o \
     cspec/CSPECData.h cspec/CSPECChanConv.h test/CSPECTestData.h \
     common/MultiGridGeometry.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) cspec/CSPECDataTest.cpp cspec/CSPECData.o cspec/CSPECChanConv.o -o $@ $(ldflags_test)

CSPECEventTest: cspec/CSPECEventTest.cpp cspec/CSPECEvent.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) cspec/CSPECEventTest.cpp  -o $@ $(ldflags_test)

ifeq ($(_ARCH),Linux) # --wrap only works with gcc
CalibrationFileTest: cspec/CalibrationFileTest.cpp cspec/CalibrationFile.o cspec/CalibrationFile.h
	@echo building $@
	$(Q)g++ -Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open -c  $(cxxflags_test) -std=c++11 -I . \
					-I .. test/SyscallWrappers.cpp \
					cspec/CalibrationFileTest.cpp
	$(Q)g++ -Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open SyscallWrappers.o \
					cspec/CalibrationFile.o CalibrationFileTest.o $(library) -o $@ $(ldflags_test)
endif


#
# common/ Tests
#
RingBufferTest: common/RingBufferTest.cpp common/RingBuffer.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) common/RingBufferTest.cpp -o $@ $(ldflags_test)

DetectorTest: common/DetectorTest.cpp common/Detector.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) common/DetectorTest.cpp  -o $@ $(ldflags_test)

MultiGridGeometryTest: common/MultiGridGeometryTest.cpp common/MultiGridGeometry.h libs/include/TSCTimer.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) common/MultiGridGeometryTest.cpp $(library)  -o $@ $(ldflags_test)

FBSerializerTest: common/FBSerializerTest.cpp common/FBSerializer.o \
  	common/Producer.o common/FBSerializer.h common/Producer.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) common/FBSerializerTest.cpp common/FBSerializer.o common/Producer.o \
		$(library) -o $@ $(ldflags_test) $(kafkalibs)

HistSerializerTest: nmxvmm2srs/HistSerializerTest.cpp nmxvmm2srs/HistSerializer.o \
    nmxvmm2srs/HistSerializer.h common/Producer.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) nmxvmm2srs/HistSerializerTest.cpp nmxvmm2srs/HistSerializer.o \
	   $(library) -o $@ $(ldflags_test)

TrackSerializerTest: nmxvmm2srs/TrackSerializerTest.cpp nmxvmm2srs/TrackSerializer.o \
    nmxvmm2srs/TrackSerializer.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) nmxvmm2srs/TrackSerializerTest.cpp nmxvmm2srs/TrackSerializer.o \
	   $(library) -o $@ $(ldflags_test)

EFUArgsTest: common/EFUArgsTest.cpp common/EFUArgs.o common/EFUArgs.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) common/EFUArgsTest.cpp  common/EFUArgs.o $(library) -o $@ $(ldflags_test)

NewStatsTest: common/NewStatsTest.cpp common/NewStats.o common/NewStats.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) common/NewStatsTest.cpp  common/NewStats.o $(library) -o $@ $(ldflags_test)


#
# NMX / VMM Tests
#
NMXVMM2SRSDataTest:  nmxvmm2srs/NMXVMM2SRSDataTest.cpp nmxvmm2srs/NMXVMM2SRSData.o nmxvmm2srs/NMXVMM2SRSData.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) nmxvmm2srs/NMXVMM2SRSDataTest.cpp nmxvmm2srs/NMXVMM2SRSData.o -o $@ $(ldflags_test)

EventletBuilderH5Test: nmxgen/EventletBuilderH5Test.cpp nmxgen/EventletBuilderH5.o \
		nmxgen/EventletBuilderH5.h NMX/Clusterer.o NMX/Clusterer.h \
		NMX/EventNMX.o NMX/EventNMX.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) nmxgen/EventletBuilderH5Test.cpp nmxgen/EventletBuilderH5.o \
	NMX/Clusterer.o NMX/EventNMX.o -o $@ $(ldflags_test)

EventletBuilderTest: nmxvmm2srs/EventletBuilderTest.cpp nmxvmm2srs/EventletBuilder.o \
				nmxvmm2srs/NMXVMM2SRSData.o  NMX/Clusterer.o  NMX/EventNMX.o \
				nmxvmm2srs/NMXVMM2SRSData.h nmxvmm2srs/EventletBuilder.h NMX/Clusterer.h \
				NMX/EventNMX.h NMX/Time.o NMX/Time.h NMX/Geometry.o NMX/Geometry.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) nmxvmm2srs/EventletBuilderTest.cpp nmxvmm2srs/EventletBuilder.o  \
				NMX/Time.o NMX/EventNMX.o NMX/Geometry.o NMX/Clusterer.o nmxvmm2srs/NMXVMM2SRSData.o -o $@ $(ldflags_test)

EventletTest: NMX/EventletTest.cpp NMX/Eventlet.o NMX/Eventlet.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) NMX/EventletTest.cpp  NMX/Eventlet.o $(library) -o $@ $(ldflags_test)

GeometryTest: NMX/GeometryTest.cpp NMX/Geometry.o NMX/Geometry.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) NMX/GeometryTest.cpp NMX/Geometry.o $(library) -o $@ $(ldflags_test)

TimeTest: NMX/TimeTest.cpp NMX/Time.o NMX/Time.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) NMX/TimeTest.cpp NMX/Time.o $(library) -o $@ $(ldflags_test)

ClustererTest: NMX/ClustererTest.cpp NMX/Clusterer.o NMX/Clusterer.h NMX/EventNMX.o NMX/EventNMX.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) NMX/ClustererTest.cpp NMX/EventNMX.o NMX/Clusterer.o $(library) -o $@ $(ldflags_test)

EventTest: NMX/EventTest.cpp NMX/EventNMX.o NMX/EventNMX.h
	@echo building $@
	$(Q)g++ $(cxxflags_test) NMX/EventTest.cpp NMX/EventNMX.o $(library) -o $@ $(ldflags_test)
