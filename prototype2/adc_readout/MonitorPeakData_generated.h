// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MONITORPEAKDATA_H_
#define FLATBUFFERS_GENERATED_MONITORPEAKDATA_H_

#include "flatbuffers/flatbuffers.h"

struct MonitorPeakData;

struct MonitorPeakData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIMESTAMP = 4,
    VT_AMPLITUDE = 6,
    VT_CHANNEL = 8,
    VT_NAME = 10
  };
  uint64_t TimeStamp() const { return GetField<uint64_t>(VT_TIMESTAMP, 0); }
  bool mutate_TimeStamp(uint64_t _TimeStamp) { return SetField(VT_TIMESTAMP, _TimeStamp); }
  uint16_t Amplitude() const { return GetField<uint16_t>(VT_AMPLITUDE, 0); }
  bool mutate_Amplitude(uint16_t _Amplitude) { return SetField(VT_AMPLITUDE, _Amplitude); }
  uint16_t Channel() const { return GetField<uint16_t>(VT_CHANNEL, 0); }
  bool mutate_Channel(uint16_t _Channel) { return SetField(VT_CHANNEL, _Channel); }
  const flatbuffers::String *Name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  flatbuffers::String *mutable_Name() { return GetPointer<flatbuffers::String *>(VT_NAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint16_t>(verifier, VT_AMPLITUDE) &&
           VerifyField<uint16_t>(verifier, VT_CHANNEL) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(Name()) &&
           verifier.EndTable();
  }
};

struct MonitorPeakDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_TimeStamp(uint64_t TimeStamp) { fbb_.AddElement<uint64_t>(MonitorPeakData::VT_TIMESTAMP, TimeStamp, 0); }
  void add_Amplitude(uint16_t Amplitude) { fbb_.AddElement<uint16_t>(MonitorPeakData::VT_AMPLITUDE, Amplitude, 0); }
  void add_Channel(uint16_t Channel) { fbb_.AddElement<uint16_t>(MonitorPeakData::VT_CHANNEL, Channel, 0); }
  void add_Name(flatbuffers::Offset<flatbuffers::String> Name) { fbb_.AddOffset(MonitorPeakData::VT_NAME, Name); }
  MonitorPeakDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MonitorPeakDataBuilder &operator=(const MonitorPeakDataBuilder &);
  flatbuffers::Offset<MonitorPeakData> Finish() {
    auto o = flatbuffers::Offset<MonitorPeakData>(fbb_.EndTable(start_, 4));
    fbb_.Required(o, MonitorPeakData::VT_NAME);  // Name
    return o;
  }
};

inline flatbuffers::Offset<MonitorPeakData> CreateMonitorPeakData(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t TimeStamp = 0,
    uint16_t Amplitude = 0,
    uint16_t Channel = 0,
    flatbuffers::Offset<flatbuffers::String> Name = 0) {
  MonitorPeakDataBuilder builder_(_fbb);
  builder_.add_TimeStamp(TimeStamp);
  builder_.add_Name(Name);
  builder_.add_Channel(Channel);
  builder_.add_Amplitude(Amplitude);
  return builder_.Finish();
}

inline flatbuffers::Offset<MonitorPeakData> CreateMonitorPeakDataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t TimeStamp = 0,
    uint16_t Amplitude = 0,
    uint16_t Channel = 0,
    const char *Name = nullptr) {
  return CreateMonitorPeakData(_fbb, TimeStamp, Amplitude, Channel, Name ? _fbb.CreateString(Name) : 0);
}

inline const MonitorPeakData *GetMonitorPeakData(const void *buf) {
  return flatbuffers::GetRoot<MonitorPeakData>(buf);
}

inline MonitorPeakData *GetMutableMonitorPeakData(void *buf) {
  return flatbuffers::GetMutableRoot<MonitorPeakData>(buf);
}

inline const char *MonitorPeakDataIdentifier() {
  return "Peak";
}

inline bool MonitorPeakDataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(buf, MonitorPeakDataIdentifier());
}

inline bool VerifyMonitorPeakDataBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MonitorPeakData>(MonitorPeakDataIdentifier());
}

inline void FinishMonitorPeakDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<MonitorPeakData> root) {
  fbb.Finish(root, MonitorPeakDataIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MONITORPEAKDATA_H_
