if(NOT ${GTEST_FOUND})
    message(WARNING "Unable to build unit tests as GTest was not found.")
    return()
endif()

enable_testing()

find_program(VALGRIND_CMD valgrind)
if(EXISTS ${VALGRIND_CMD})
    message(STATUS "Valgrind found.")
else()
    message(STATUS "Valgrind not found. Unable to run memory check.")
endif()

set(DO_COV OFF)

mark_as_advanced(DO_COV VALGRIND_CMD)

if (${COV})
    if (${CMAKE_COMPILER_IS_GNUCXX})
        message(STATUS "Code coverage enabled.")
        set(DO_COV ON)
        set(CMAKE_BUILD_TYPE Debug)
    else()
        message(FATAL_ERROR "Unable to enable code coverage as this functionality only works with the g++ compiler.")
    endif()
endif()

add_definitions(-std=c++11 -pthread)

file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/multigrid/calib_data DESTINATION ${CMAKE_BINARY_DIR}/prototype2)
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/memcheck_res/)
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/coverage/)

#
# EFU Tests
#
if(${CMAKE_COMPILER_IS_GNUCXX})
    set(ParserTest_LIB_SRC efu/ParserTest.cpp test/SyscallWrappers.cpp)
    add_library(ParserTest_LIB STATIC ${ParserTest_LIB_SRC})
    set_target_properties(ParserTest_LIB PROPERTIES COMPILE_FLAGS "-Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open")

    set(ParserTest_SRC efu/Parser.cpp common/EFUArgs.cpp multigrid/mgcncs/CalibrationFile.cpp)
    set(ParserTest_INC efu/Parser.h common/EFUArgs.h multigrid/mgcncs/CalibrationFile.h)
    set(ParserTest_LINK ParserTest_LIB)
    create_test_executable(ParserTest "${ParserTest_LINK}")
    add_compile_flags(ParserTest "-Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open")
    add_linker_flags(ParserTest "-Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open")
endif()

#
# CSPEC / Multi Grid Tests
#
set(MGCNCSChanConvTest_SRC multigrid/mgcncs/ChanConvTest.cpp multigrid/mgcncs/ChanConv.cpp)
create_test_executable(MGCNCSChanConvTest "")

set(MGCNCSDataTest_SRC multigrid/mgcncs/DataTest.cpp multigrid/mgcncs/Data.cpp multigrid/mgcncs/ChanConv.cpp)
set(MGCNCSDataTest_INC multigrid/mgcncs/Data.h multigrid/mgcncs/ChanConv.h multigrid/mgcncs/TestData.h multigrid/mgcncs/Geometry.h)
create_test_executable(MGCNCSDataTest "")

#set(CSPECEventTest_SRC cspec/CSPECEventTest.cpp)
#set(CSPECEventTest_INC cspec/CSPECEvent.h)
#create_test_executable(CSPECEventTest "")

if(${CMAKE_COMPILER_IS_GNUCXX})
    set(CalibrationFileTest_LIB_SRC
    multigrid/mgcncs/CalibrationFileTest.cpp
    test/SyscallWrappers.cpp)
    add_library(CalibrationFileTest_LIB STATIC ${CalibrationFileTest_LIB_SRC})
    set_target_properties(CalibrationFileTest_LIB PROPERTIES COMPILE_FLAGS "-Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open")

    set(CalibrationFileTest_SRC multigrid/mgcncs/CalibrationFile.cpp)
    set(CalibrationFileTest_INC multigrid/mgcncs/CalibrationFile.h)
    set(CalibrationFileTest_LINK CalibrationFileTest_LIB ${GTEST_BOTH_LIBRARIES})
    create_test_executable(CalibrationFileTest "${CalibrationFileTest_LINK}")
    add_compile_flags(CalibrationFileTest "-Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open")
    add_linker_flags(CalibrationFileTest "-Wl,--wrap=fstat,--wrap=read,--wrap=write,--wrap=open")
endif()


#
# common/ Tests
#
set(VersionTest_SRC common/VersionTest.cpp common/Version.h)
create_test_executable(VersionTest "")


set(RingBufferTest_SRC common/RingBufferTest.cpp common/RingBuffer.h)
create_test_executable(RingBufferTest "")


set(DetectorTest_SRC common/DetectorTest.cpp common/Detector.h)
create_test_executable(DetectorTest "")


set(MultiGridGeometryTest_SRC multigrid/mgcncs/GeometryTest.cpp multigrid/mgcncs/Geometry.h
    ../libs/include/TSCTimer.h)
create_test_executable(MultiGridGeometryTest "")


set(FBSerializerTest_SRC common/FBSerializerTest.cpp common/FBSerializer.cpp common/Producer.cpp)
set(FBSerializerTest_INC common/FBSerializer.h common/Producer.h)
create_test_executable(FBSerializerTest "${LibRDKafka_LIBRARIES}")


set(HistSerializerTest_SRC gdgem/vmm2srs/HistSerializerTest.cpp gdgem/vmm2srs/HistSerializer.cpp)
set(HistSerializerTest_INC gdgem/vmm2srs/HistSerializer.h common/Producer.h)
create_test_executable(HistSerializerTest "")


set(TrackSerializerTest_SRC gdgem/vmm2srs/TrackSerializerTest.cpp gdgem/vmm2srs/TrackSerializer.cpp
    gdgem/nmx/Eventlet.cpp gdgem/nmx/EventNMX.cpp)
set(TrackSerializerTest_INC gdgem/vmm2srs/TrackSerializer.h gdgem/nmx/EventNMX.h gdgem/nmx/Eventlet.h)
create_test_executable(TrackSerializerTest "")

set(EFUArgsTest_SRC common/EFUArgsTest.cpp common/EFUArgs.cpp common/EFUArgs.h)
create_test_executable(EFUArgsTest "")

set(NewStatsTest_SRC common/NewStatsTest.cpp common/NewStats.cpp common/NewStats.h)
create_test_executable(NewStatsTest "")


#
# NMX / VMM Tests
#
set(NMXVMM2SRSDataTest_SRC gdgem/vmm2srs/NMXVMM2SRSDataTest.cpp gdgem/vmm2srs/NMXVMM2SRSData.cpp
    gdgem/vmm2srs/NMXVMM2SRSData.h)
create_test_executable(NMXVMM2SRSDataTest "")


set(EventletBuilderH5Test_SRC gdgem/nmxgen/EventletBuilderH5Test.cpp gdgem/nmxgen/EventletBuilderH5.cpp
    gdgem/nmx/EventNMX.cpp gdgem/nmx/Clusterer.cpp)
set(EventletBuilderH5Test_INC gdgem/nmxgen/EventletBuilderH5.h gdgem/nmx/Clusterer.h gdgem/nmx/EventNMX.h)
create_test_executable(EventletBuilderH5Test "")


set(EventletBuilderTest_SRC gdgem/vmm2srs/EventletBuilderTest.cpp gdgem/vmm2srs/EventletBuilder.cpp
    gdgem/vmm2srs/NMXVMM2SRSData.cpp gdgem/nmx/Clusterer.cpp gdgem/nmx/EventNMX.cpp gdgem/nmx/Geometry.cpp gdgem/nmx/Time.cpp)
set(EventletBuilderTest_INC gdgem/vmm2srs/NMXVMM2SRSData.h gdgem/vmm2srs/EventletBuilder.h gdgem/nmx/Clusterer.h
    gdgem/nmx/EventNMX.h gdgem/nmx/Time.h gdgem/nmx/Geometry.h)
create_test_executable(EventletBuilderTest "")

set(EventletTest_SRC gdgem/nmx/EventletTest.cpp gdgem/nmx/Eventlet.cpp gdgem/nmx/Eventlet.h)
create_test_executable(EventletTest "")

set(GeometryTest_SRC gdgem/nmx/GeometryTest.cpp gdgem/nmx/Geometry.cpp)
create_test_executable(GeometryTest "")

set(TimeTest_SRC gdgem/nmx/TimeTest.cpp gdgem/nmx/Time.cpp gdgem/nmx/Time.h)
create_test_executable(TimeTest "")

set(ClustererTest_SRC gdgem/nmx/ClustererTest.cpp gdgem/nmx/Clusterer.cpp gdgem/nmx/EventNMX.cpp)
set(ClustererTest_INC gdgem/nmx/Clusterer.h gdgem/nmx/EventNMX.h)
create_test_executable(ClustererTest "")

set(EventTest_SRC gdgem/nmx/EventTest.cpp gdgem/nmx/EventNMX.cpp gdgem/nmx/EventNMX.h)
create_test_executable(EventTest "")

#
# ESS Readout System Tests
#
set(ReadoutTest_SRC readout/ReadoutTest.cpp readout/Readout.cpp)
set(ReadoutTest_INC test/TestBase.h readout/Readout.h readout/ReadoutTestData.h)
create_test_executable(ReadoutTest "")

set(ReadoutDummyTest_SRC readout/ReadoutDummyTest.cpp readout/Readout.cpp readout/ReadoutDummy.cpp)
set(ReadoutDummyTest_INC test/TestBase.h readout/Readout.h readout/ReadoutDummy.h readout/ReadoutTestData.h)
create_test_executable(ReadoutDummyTest "")


#
# Multiblade Tests
#
set(MBDummyTest_SRC multiblade/mbcaen/DummyClassTest.cpp multiblade/mbcaen/DummyClass.cpp)
set(MBDummyTest_INC test/TestBase.h multiblade/mbcaen/DummyClass.h)
create_test_executable(MBDummyTest "")


#
# Libs unit tests
#

include_directories(..)

set(CounterTest_SRC testmain.cpp CounterTest.cpp)
PREPEND(CounterTest_SRC "../libs/test/Counter")
set(CounterTest_INC Counter.h)
PREPEND(CounterTest_INC "../libs/include")
create_test_executable(CounterTest "")

set(StatCounterTest_SRC testmain.cpp StatCounterTest.cpp)
PREPEND(StatCounterTest_SRC "../libs/test/Counter")
set(StatCounterTest_INC StatCounter.h)
PREPEND(StatCounterTest_INC "../libs/include")
create_test_executable(StatCounterTest "")


#
#  These commands must be at the end of this file
#
add_custom_target(runtest COMMAND ${CMAKE_CTEST_COMMAND} -V -R regular_* DEPENDS ${unit_test_targets})
add_custom_target(valgrind COMMAND ${CMAKE_CTEST_COMMAND} -R memcheck_*  DEPENDS ${unit_test_targets})
if (DO_COV)
    find_program(GCOV_PATH gcov)
    find_program(GCOVR_PATH gcovr PATHS ${CMAKE_SOURCE_DIR}/tests)
    if (NOT GCOV_PATH OR NOT GCOVR_PATH)
        message(WARNING "Unable to enable coverage target as gcov and/or gocvr was not found.")
    else()
        message(STATUS "Generating coverage target.")
        add_custom_target(coverage COMMAND ${GCOVR_PATH} "-r" "${CMAKE_SOURCE_DIR}/" "-x" "-e" ".*Test.cpp" "-e" ".*gtest.*.h" "-o" "${CMAKE_BINARY_DIR}/coverage/cov.xml" DEPENDS runtest)
    endif()
endif()
