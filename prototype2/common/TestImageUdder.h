
#pragma once

#include <logical_geometry/ESSGeometry.h>
#include <vector>

class Udder {
public:
  static unsigned int clock;
  int index = 0;
  const uint8_t width = 64;
  const uint8_t height = 78;
  static const std::vector<uint8_t> udder;

  uint32_t getPixel(ESSGeometry * geom) {
    clock++;
    index = clock % (width * height);
    auto byte = index / 8;
    auto bit = 7 - index % 8;
    assert( byte >= 0 and (byte < width * height / 8) );
    assert( bit >= 0 and bit < 8);
    //printf("index: %u, clock: %u\n", index, clock);

    while ((udder[byte] & (1 << bit)) == 0x00) {
      clock++;
      index = clock % (width * height);
      byte = index / 8;
      bit = 7 - index % 8;
    }
    uint16_t x = 6 * 32.0 * (index % width) / width;
    uint16_t y = 32.0 * (index / width) / height;
    //printf("%u, x:%u, y:%u, pixel %u\n", clock, x, y, geom->pixel2D(x, y));
    return geom->pixel2D(x, y);
  }
};

unsigned int Udder::clock = 0;

const std::vector<uint8_t> Udder::udder = {
  0x00, 0x00, 0x00, 0x41, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x18, 0x40, 0x1c, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x1c, 0x20, 0x1e, 0x20, 0x00,
  0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0x10, 0x1f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0x88, 0x1f, 0x00, 0x00,
  0x00, 0x10, 0x40, 0x0f, 0x80, 0x1f, 0x88, 0x00,
  0x00, 0x20, 0x00, 0x0f, 0xc4, 0x0f, 0x84, 0x00,
  0x00, 0x00, 0x10, 0x0f, 0xc0, 0x8f, 0xc4, 0x00,
  0x00, 0x03, 0x08, 0x47, 0xe2, 0x0f, 0xc0, 0x00,
  0x00, 0x07, 0x80, 0x07, 0xe1, 0x47, 0xe4, 0x00,
  0x00, 0x07, 0xc4, 0x07, 0xf1, 0x47, 0xe2, 0x00,
  0x00, 0x27, 0xe2, 0x03, 0xf0, 0x07, 0xe0, 0x00,
  0x00, 0x03, 0xe0, 0x23, 0xf8, 0x03, 0xf1, 0x00,
  0x00, 0x03, 0xf1, 0x13, 0xf8, 0x03, 0xf0, 0x00,
  0x04, 0x11, 0xf8, 0x81, 0xff, 0xff, 0xf0, 0x00,
  0x02, 0x01, 0xf8, 0x81, 0xff, 0xff, 0xf8, 0x80,
  0x21, 0x01, 0xfc, 0x07, 0xff, 0xff, 0xfc, 0x00,
  0x30, 0x80, 0xfc, 0x1f, 0xff, 0xff, 0xfc, 0x00,
  0x38, 0x08, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x10,
  0x3c, 0x40, 0x7f, 0xff, 0xff, 0xfc, 0xff, 0x10,
  0x3e, 0x20, 0x7f, 0xff, 0xff, 0xf8, 0x7f, 0x00,
  0x3e, 0x10, 0x3f, 0xff, 0xff, 0xe0, 0xff, 0x80,
  0x1f, 0x00, 0x3f, 0xff, 0xff, 0x83, 0xff, 0xc8,
  0x1f, 0x04, 0x3f, 0xff, 0xb8, 0x07, 0xff, 0xc0,
  0x1f, 0x88, 0x7c, 0x00, 0x18, 0x1f, 0xff, 0xe2,
  0x0f, 0xc0, 0xfc, 0x00, 0x1c, 0x00, 0xff, 0xe0,
  0x0f, 0xc1, 0xfe, 0x00, 0x3f, 0x00, 0x7f, 0xe0,
  0x0f, 0xc1, 0xff, 0xff, 0xfe, 0x0c, 0x3f, 0xf0,
  0x47, 0xe3, 0xff, 0xc0, 0x7f, 0x3f, 0x1f, 0xf1,
  0x07, 0xf7, 0xff, 0x80, 0x3e, 0x3f, 0x9f, 0xf8,
  0x03, 0xff, 0xff, 0x0e, 0x1e, 0x63, 0x8f, 0xf8,
  0x03, 0xff, 0xff, 0x3f, 0x1e, 0x41, 0xcf, 0xf8,
  0x01, 0xff, 0xfe, 0x7f, 0xcc, 0x40, 0xc7, 0xf8,
  0x11, 0xff, 0xfe, 0x78, 0x4e, 0x18, 0xc7, 0xf8,
  0x08, 0xff, 0xfe, 0x70, 0x66, 0x00, 0xc7, 0xfc,
  0x00, 0xff, 0xfe, 0x71, 0x26, 0x00, 0x8f, 0xfc,
  0x00, 0x7f, 0xfe, 0x73, 0x27, 0x00, 0x0f, 0xfc,
  0x04, 0x7f, 0xfe, 0x72, 0x27, 0x00, 0x3f, 0xfc,
  0x00, 0x7f, 0xfe, 0x70, 0x07, 0xf7, 0xff, 0xfc,
  0x00, 0x7f, 0xfe, 0x3c, 0x1f, 0xff, 0xff, 0xfc,
  0x00, 0x7f, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xfc,
  0x00, 0x7f, 0xff, 0x07, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x7f, 0xff, 0xbf, 0xff, 0x00, 0xff, 0xfc,
  0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xfc,
  0x02, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xfc,
  0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xfc,
  0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xfc,
  0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xfc,
  0x00, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xfc,
  0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xfc,
  0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xfc,
  0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xf8,
  0x01, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xf8,
  0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xf8,
  0x00, 0x8f, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xf8,
  0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xf8,
  0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xf8,
  0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xf1,
  0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xf2,
  0x00, 0x23, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xe0,
  0x00, 0x11, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xe0,
  0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xc2,
  0x00, 0x08, 0x7f, 0xfe, 0x00, 0x00, 0x0f, 0xc4,
  0x00, 0x04, 0x3f, 0xfe, 0x00, 0x00, 0x1f, 0x80,
  0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x3f, 0x00,
  0x00, 0x02, 0x1f, 0xff, 0x00, 0x00, 0xfe, 0x10,
  0x00, 0x01, 0x0f, 0xff, 0x80, 0x03, 0xfc, 0x30,
  0x00, 0x00, 0x83, 0xff, 0xc0, 0x1f, 0xf8, 0x00,
  0x00, 0x00, 0x41, 0xff, 0xff, 0xff, 0xf0, 0x40,
  0x00, 0x00, 0x10, 0x7f, 0xff, 0xff, 0xc1, 0x00,
  0x00, 0x00, 0x08, 0x1f, 0xff, 0xff, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x60, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
};
