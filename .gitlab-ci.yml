workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

default:
  tags:
    - docker
  
stages:
  - setup
  - cppcheck
  - build
  - test
  - publish

variables:
  ALMALINUX9_IMAGE: "registry.esss.lu.se/ecdc/ess-dmsc/docker-almalinux9-conan:1.3.0"
  CENTOS7_IMAGE: "registry.esss.lu.se/ecdc/ess-dmsc/docker-centos7-conan:1.1.0"
  UBUNTU2204_IMAGE: "registry.esss.lu.se/ecdc/ess-dmsc/docker-ubuntu2204-conan:1.1.0"
  CONAN_USER_HOME: "$CI_PROJECT_DIR"

.template_build_info: &template_build_info
    - |
      {
         echo "Build type: $(grep CMAKE_BUILD_TYPE build/CMakeCache.txt | cut -d= -f2)"
          echo "Git branch: $CI_COMMIT_REF_NAME"
          echo "Git commit: ${CI_COMMIT_SHORT_SHA}"
          echo "Build date: $(date +'%Y-%m-%d %H:%M:%S')"
          echo "Build image: $(basename $CI_JOB_IMAGE)"
      } > build/BUILD_INFO

.prepare_archive: &prepare_archive
    - mkdir -p archive/event-formation-unit
    - cp -r build/bin archive/event-formation-unit
    - cp -r build/generators archive/event-formation-unit
    - cp -r build/lib archive/event-formation-unit
    - cp -r build/licenses archive/event-formation-unit
    - cp -r build/BUILD_INFO archive/event-formation-unit
    - mkdir archive/event-formation-unit/util
    - cp -r utils/efushell archive/event-formation-unit/util
    - mkdir archive/event-formation-unit/configs
    - mkdir archive/event-formation-unit/data
    - cp -r CHANGELOG archive/event-formation-unit/

.versioning_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        VERSION: ${CI_COMMIT_SHORT_SHA}
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: ${CI_COMMIT_TAG}
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        VERSION: ${CI_COMMIT_SHORT_SHA}

conan_setup:
  stage: setup
  image: $ALMALINUX9_IMAGE
  script:
    - conan config install http://github.com/ess-dmsc/conan-configuration.git
  artifacts:
    paths:
      - .conan/
    expire_in: 1 hour
    when: always

cppcheck:
  stage: cppcheck
  image: $ALMALINUX9_IMAGE
  script:
    - find src/ -type f \( -name '*.cpp' -o -name '*.c' -o -name '*.h' \) '!' -path "*/test/*" '!' -name "*Test*" > cppcheck_files.txt
    - cppcheck --enable=all --inconclusive --std=c++14 --suppress=missingIncludeSystem --file-list=cppcheck_files.txt 2> cppcheck.xml
  artifacts:
    reports:
      codequality: cppcheck.xml
    paths:
      - cppcheck.xml
    expire_in: 1 week

almalinux9_gcc11_release:
  image: $ALMALINUX9_IMAGE
  stage: build
  dependencies:
    - conan_setup
  script:
    - mkdir -p build
    - cd build
    - conan install .. --build=missing --profile=linux_x86_64_gcc11
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) all
  after_script:
    - *template_build_info
    - *prepare_archive
    - ARCHIVE_NAME="event-formation-unit-${VERSION}-almalinux9.tar.gz"
    - mkdir -p dist
    - tar -C archive -czf dist/$ARCHIVE_NAME event-formation-unit
  artifacts:
    paths:
      - build/
      - dist/
    expire_in: 1 day
  extends: .versioning_rules

ubuntu2204_gcc11_release:
  image: $UBUNTU2204_IMAGE
  stage: build
  dependencies:
    - conan_setup
  script:
    - mkdir -p build
    - cd build
    - conan install .. --build=missing --profile=linux_x86_64_gcc11
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) all
  after_script:
    - *template_build_info
  artifacts:
    paths:
      - build/
    expire_in: 1 day

ubuntu2204_clang17_release:
  image: $UBUNTU2204_IMAGE
  stage: build
  dependencies:
    - conan_setup
  variables:
    CC: /usr/bin/clang-17
    CXX: /usr/bin/clang++-17
  script:
    - mkdir -p build
    - cd build
    - conan install .. --build=missing --profile=linux_x86_64_clang17
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) all
  after_script:
    - *template_build_info
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

centos7_gcc11_release:
  image: $CENTOS7_IMAGE
  stage: build
  dependencies:
    - conan_setup
  script:
    - mkdir -p build
    - cd build
    - conan install .. --build=missing --profile=linux_x86_64_gcc11_legacy
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make -j$(nproc) all
  after_script:
    - *template_build_info
    - *prepare_archive
    - ARCHIVE_NAME="event-formation-unit-${VERSION}-centos7.tar.gz"
    - mkdir -p dist
    - tar -C archive -czf dist/$ARCHIVE_NAME event-formation-unit
  artifacts:
    paths:
      - build/
      - dist/
    expire_in: 1 day
  extends: .versioning_rules

runefu:
  image: $CENTOS7_IMAGE
  stage: test
  dependencies:
    - conan_setup
  script:
    - mkdir -p build
    - cd build
    - conan install .. --build=missing --profile=linux_x86_64_gcc11_legacy -s build_type=Debug
    - cmake -DCOV=ON -DCMAKE_BUILD_TYPE=Debug -DGOOGLE_BENCHMARK=ON ..
    - make -j$(nproc) runefu
  artifacts:
    paths:
      - build/
    expire_in: 1 day

coverage:
  image: $ALMALINUX9_IMAGE
  stage: test
  dependencies:
    - conan_setup
  script:
    - mkdir -p build
    - cd build
    - conan install .. --build=missing --profile=linux_x86_64_gcc11 -s build_type=Debug
    - cmake -DCOV=ON -DCMAKE_BUILD_TYPE=Debug -DGOOGLE_BENCHMARK=ON ..
    - make -j$(nproc) runtest
    - make coverage_all
  artifacts:
    paths:
      - build/coverage
    expire_in: 1 week
    reports:
      junit: build/test_results/*.xml
      coverage_report:
        coverage_format: cobertura    
        path: build/coverage/coverage.xml
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+)%/'

publish_tar_job:
  stage: publish
  image: alpine/curl:latest
  dependencies:
    - centos7_gcc11_release
    - almalinux9_gcc11_release
  before_script:
    - curl -fL https://install-cli.jfrog.io | sh
    - jf config add $ESS_ARTIFACTORY_ID --url=$ESS_ARTIFACTORY_URL --user=$ESS_ARTIFACTORY_ECDC_USER --password=$ESS_ARTIFACTORY_ECDC_GENERIC_TOKEN
  script:
    - jf rt u --build-name="event-formation-unit-gitlab-ci" --build-number=${CI_PIPELINE_IID} "dist/*.tar.gz" ecdc-generic-release/${ARTIFACTORY_UPLOAD_PATH} --flat=true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        ARTIFACTORY_UPLOAD_PATH: "${CI_PROJECT_NAME}/${CI_DEFAULT_BRANCH}/${CI_PIPELINE_IID}/"
    - if: $CI_COMMIT_TAG
      variables:
        ARTIFACTORY_UPLOAD_PATH: "${CI_PROJECT_NAME}/tags/${CI_COMMIT_TAG}/"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never


publish_docker_job:
  parallel: 
    matrix:
      - INSTRUMENT: "bifrost"
      - INSTRUMENT: "cbm"
      - INSTRUMENT: "cspec"
      - INSTRUMENT: "dream"
      - INSTRUMENT: "estia"
      - INSTRUMENT: "freia"
      - INSTRUMENT: "heimdal"
      - INSTRUMENT: "loki"
      - INSTRUMENT: "magic"
      - INSTRUMENT: "miracles"
      - INSTRUMENT: "nmx"
      - INSTRUMENT: "tbl3he"
      - INSTRUMENT: "timepix3"
      - INSTRUMENT: "trex"

  stage: publish
  image: docker:latest
  services:
    - docker:dind
  variables:
    IMAGE_NAME: "$CI_REGISTRY_IMAGE/efu-$INSTRUMENT"
  dependencies:
    - almalinux9_gcc11_release
  script:
    - echo "Publishing docker image"
    - |
      docker login \
      -u "$CI_REGISTRY_USER" \
      -p "$CI_REGISTRY_PASSWORD" \
      "$CI_REGISTRY"

    - |
      docker build \
          --build-arg https_proxy="http://172.20.72.11:8888" \
          --build-arg http_proxy="http://172.20.72.11:8888" \
          --build-arg INSTRUMENT_NAME=$INSTRUMENT \
          -t "$IMAGE_NAME:$DOCKER_IMAGE_TAG" \
          -f .ci/docker/Dockerfile.deploy .
    - docker push "$IMAGE_NAME:$DOCKER_IMAGE_TAG"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        DOCKER_IMAGE_TAG: "latest"
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_IMAGE_TAG: "${CI_COMMIT_TAG}"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
